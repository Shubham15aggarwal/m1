PL/SQL LAB

2.2
The following PL/SQL block is incomplete.
Modify the block to achieve requirements as stated in the comments in the block.
DECLARE --outer block
var_num1 NUMBER := 5;
BEGIN
DECLARE --inner block
var_num1 NUMBER := 10;
BEGIN
DBMS_OUTPUT.PUT_LINE('Value for var_num1:' ||var_num1);
--Can outer block variable (var_num1) be printed here.If Yes,Print the same.
END;
--Can inner block variable(var_num1) be printed here.If Yes,Print the same.
END;
sol:
DECLARE
  2  VAR_NUM1 NUMBER:=5;
  3  BEGIN
  4  DECLARE
  5  VAR_NUM1 NUMBER:=10;
  6  BEGIN
  7  DBMS_OUTPUT.PUT_LINE('VALUE OF INNER VAR_NUM1:'||VAR_NUM1);
  8  END;
  9  DBMS_OUTPUT.PUT_LINE('VALUE OF OUTER VAR_NUM1:'||VAR_NUM1);
 10* END;
 11  /
VALUE OF INNER VAR_NUM1:10
VALUE OF INNER VAR_NUM1:5

2.3
Write a PL/SQL block to retrieve all staff (code, name, salary) under specific
department number and display the result. (Note: The Department_Code will be accepted
from user. Cursor to be used.)
sol:
DECLARE
  2  C_REV STAFF_MASTERS%ROWTYPE;
  3  CURSOR C_STAFF_MASTERS IS SELECT * FROM STAFF_MASTERS WHERE DEPT_CODE=&DEPT_CODE;
  4  BEGIN
  5  OPEN C_STAFF_MASTERS;
  6  LOOP
  7  FETCH C_STAFF_MASTERS INTO C_REV;
  8  EXIT WHEN C_STAFF_MASTERS%NOTFOUND;
  9  DBMS_OUTPUT.PUT_LINE(C_REV.STAFF_NAME||' '||C_REV.STAFF_CODE||' '||C_REV.STAFF_SAL);
 10  END LOOP;
 11  CLOSE C_STAFF_MASTERS;
 12  END;

2.4
Write a PL/SQL block to increase the salary by 30 % or 5000 whichever minimum for
a given Department_Code
sol:
DECLARE
  2  C1_SAL NUMBER(10);
  3  C2_SAL NUMBER(10);
  4  C_SAL STAFF_MASTERS.STAFF_SAL%TYPE;
  5  CURSOR C_STAFF_MASTERS IS SELECT STAFF_SAL FROM STAFF_MASTERS WHERE DEPT_CODE=&DEPT_CODE;
  6  BEGIN
  7  OPEN C_STAFF_MASTERS;
  8  LOOP
  9  FETCH C_STAFF_MASTERS INTO C_SAL;
 10  EXIT WHEN C_STAFF_MASTERS%NOTFOUND;
 11  C1_SAL:=C_SAL*0.3;
 12  C2_SAL:=C_SAL+5000;
 13  IF C1_SAL>C2_SAL THEN
 14  UPDATE STAFF_MASTERS SET STAFF_SAL=C2_SAL;
 15  ELSE
 16  UPDATE STAFF_MASTERS SET STAFF_SAL=C1_SAL;
 17  END IF;
 18  DBMS_OUTPUT.PUT_LINE(C_SAL);
 19  END LOOP;
 20  CLOSE C_STAFF_MASTERS;
 21  END;

2.5
Write a PL/SQL block to generate the following report for a given Department code
Student_Code Sudent_Name Subject1 Subject2 Subject3 Total Percentage
Grade
Note: Display suitable error massage if wrong department code has entered and if there
is no student in the given department.
For Grade:
Student should pass in each subject individually (pass marks 60).
Percent >= 80 then grade= A
Percent >= 70 and < 80 then grade= B
Percent >= 60 and < 70 then grade= C
Else D
sol:
 DECLARE
    C_STUDENT_CODE STUDENT_MARKS.STUDENT_CODE%TYPE;
  C_DEPT_CODE STUDENT_MASTERS.DEPT_CODE%TYPE;
   c_STUDENT_NAME STUDENT_MASTERS.STUDENT_NAME%TYPE;
  C_SUB1 STUDENT_MARKS.SUBJECT1%TYPE;
  C_SUB2 STUDENT_MARKS.SUBJECT2%TYPE;
  C_SUB3 STUDENT_MARKS.SUBJECT3%TYPE;
  C_TOTAL NUMBER;
    CURSOR C_STUDENT_MARKS IS SELECT S.STUDENT_NAME,S1.STUDENT_CODE,S1.SUBJECT1,S1.SUBJECT2,S1.SUBJECT3 FROM  STUDENT_MASTERS S,STUDENT_MARKS S1 WHERE S.DEPT_CODE=&DEPT_CODE AND S.STUDENT_CODE=S1.STUDENT_CODE AND STUDENT_YEAR=2011;
   BEGIN
  OPEN C_STUDENT_MARKS;
  LOOP
  FETCH C_STUDENT_MARKS INTO C_STUDENT_NAME,C_STUDENT_CODE,C_SUB1,C_SUB2,C_SUB3;
 EXIT WHEN C_STUDENT_MARKS%NOTFOUND;
  C_TOTAL:=(C_SUB1+C_SUB2+C_SUB3)/3;
 IF C_TOTAL>=80 THEN
  DBMS_OUTPUT.PUT_LINE(C_STUDENT_NAME||' '||C_DEPT_CODE||' '||C_SUB1||' '||C_SUB2||' 'C_SUB3||' '||C_TOTAL|| 'A');
   ELSIF C_TOTAL>=70 AND C_TOTAL<80 THEN
 DBMS_OUTPUT.PUT_LINE(C_STUDENT_NAME||' '||C_DEPT_CODE||' '||C_SUB1||' '||C_SUB2||' '||C_SUB3||' '||C_TOTAL|| 'B');
ELSIF C_TOTAL>=60 AND C_TOTAL<70 THEN
 DBMS_OUTPUT.PUT_LINE(C_STUDENT_NAME||' '||C_DEPT_CODE||' '||C_SUB1||' '||C_SUB2||' '||C_SUB3||' '||C_TOTAL|| 'C');
 ELSIF C_TOTAL<60 THEN
  DBMS_OUTPUT.PUT_LINE(C_STUDENT_NAME||' '||C_DEPT_CODE||' '||C_SUB1||' '||C_SUB2||' '||C_SUB3||' '||C_TOTAL|| 'FAIL');
  ELSE
 DBMS_OUTPUT.PUT_LINE(C_STUDENT_NAME||' '||C_DEPT_CODE||' '||C_SUB1||' '||C_SUB2||' '||C_SUB3||' '||C_TOTAL|| 'D');
   END IF;
   END LOOP;
  CLOSE C_STUDENT_MARKS;
 END;





sol:4.1 Write a PL/SQL block to find the maximum salary of the staff in the given department. Note: Department code should be passed as parameter to the cursor.

DECLARE
CURSOR CUR_STAFF(V_DEPT_CODE NUMBER)  IS SELECT MAX(STAFF_SAL) 
FROM STAFF_MASTERS WHERE DEPT_CODE=V_DEPT_CODE GROUP BY DEPT_CODE;
V_SAL STAFF_MASTERS.STAFF_SAL%TYPE;
BEGIN
 OPEN CUR_STAFF(20);
FETCH CUR_STAFF INTO V_SAL;
DBMS_OUTPUT.PUT_LINE('MAXIMUM SALARY IS:’||V_SAL);
CLOSE CUR_STAFF;
END;
4.3. Write a procedure that accept staff code and update staff name to Upper case. If the staff name is null raise a user defined exception


CREATE OR REPLACE PROCEDURE UPPER_PROC(C_STAFF_CODE IN STAFF_MASTERS.STAFF_CODE%TYPE) IS
  2  C_STAFF_NAME STAFF_MASTERS.STAFF_NAME%TYPE;
  3  C_STAFF_COUNT NUMBER(3);
  4  NOT_FOUND EXCEPTION;
  5  BEGIN
  6  SELECT COUNT(STAFF_NAME),STAFF_NAME INTO C_STAFF_COUNT,C_STAFF_NAME FROM STAFF_MASTERS
  7  WHERE STAFF_CODE=C_STAFF_CODE GROUP BY STAFF_NAME;
  8  IF C_STAFF_COUNT=0 THEN
  9  RAISE NOT_FOUND;
 10  ELSE
 11  UPDATE STAFF_MASTERS SET STAFF_NAME=UPPER(STAFF_NAME) WHERE STAFF_CODE=C_STAFF_CODE;
 12  COMMIT;
 13  END IF;
 14  EXCEPTION
 15  WHEN NOT_FOUND THEN
 16  DBMS_OUTPUT.PUT_LINE('STAFF RECORD ABSENT');
 17  WHEN OTHERS THEN/

 18  DBMS_OUTPUT.PUT_LINE('ERROR');
 19  DBMS_OUTPUT.PUT_LINE(SQLCODE||SQLERRM);
 20* END;



4.6. Write a procedure that displays the following information of all staff 
Staff_Name Department Name Designation Salary Status

CREATE OR REPLACE PROCEDURE PROC2
IS
V_SNAME STAFF_MASTERS.STAFF_NAME%TYPE;
V_SAL STAFF_MASTERS.STAFF_SAL%TYPE;
V_DNAME DEPARTMENT_MASTERS.DEPT_NAME%TYPE;
V_DESIGN DESIGNATION_MASTERS.DESIGN_NAME%TYPE;
V_STATUS VARCHAR2(30);
CURSOR CUR_EMP IS SELECT S.STAFF_NAME,S.STAFF_SAL,D.DEPT_NAME,DE.DESIGN_NAME,
CASE
WHEN STAFF_SAL>(SELECT AVG(STAFF_SAL) FROM STAFF_MASTERS S GROUP BY DEPT_CODE) THEN  'GREATER'
WHEN STAFF_SAL<(SELECT AVG(STAFF_SAL) FROM STAFF_MASTERS S GROUP BY DEPT_CODE) THEN  'LESSER'
WHEN STAFF_SAL=(SELECT AVG(STAFF_SAL) FROM STAFF_MASTERS S GROUP BY DEPT_CODE) THEN 'EQUAL'
END AS STATUS
FROM STAFF_MASTERS S,DEPARTMENT_MASTERS D,DESIGNATION_MASTERS DE
WHERE S.DEPT_CODE=D.DEPT_CODE AND S.DESIGN_CODE=DE.DESIGN_CODE;
BEGIN
OPEN CUR_EMP;
LOOP
FETCH CUR_EMP INTO V_SNAME,V_SAL,V_DNAME,V_DESIGN,V_STATUS;
EXIT WHEN CUR_EMP%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(V_SNAME||'  '||V_SAL||'  '||V_DNAME||'  '||V_DESIGN||'  '||V_STATUS);
END LOOP;
END;


4.4 Write a procedure to find the manager of a staff. Procedure should return the following – Staff_Code, Staff_Name, Dept_Code and Manager Name
CREATE OR REPLACE PROCEDURE PROC3
IS
V_SNAME STAFF_MASTERS.STAFF_NAME%TYPE;
V_SCODE STAFF_MASTERS.STAFF_CODE%TYPE;
V_DCODE DEPARTMENT_MASTERS.DEPT_CODE%TYPE;
V_MANAGER STAFF_MASTERS.STAFF_NAME%TYPE;
CURSOR CUR_STAFF IS SELECT S.STAFF_NAME,S.STAFF_CODE,S.DEPT_CODE,
M.STAFF_NAME FROM STAFF_MASTERS S,STAFF_MASTERS M WHERE S.STAFF_CODE=M.MGR_CODE;
BEGIN
OPEN CUR_STAFF;
LOOP
FETCH CUR_STAFF INTO V_SNAME,V_SCODE,V_DCODE,V_MANAGER;
EXIT WHEN CUR_STAFF%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(V_SNAME);
DBMS_OUTPUT.PUT_LINE(V_SCODE);
DBMS_OUTPUT.PUT_LINE(V_DCODE);
DBMS_OUTPUT.PUT_LINE(V_MANAGER);
END LOOP;
CLOSE CUR_STAFF;
END
4.5
Write a function to compute the following. Function should take Staff_Code and
return the cost to company.
DA = 15% Salary, HRA= 20% of Salary, TA= 8% of Salary.
Special Allowance will be decided based on the service in the company.
< 1 Year Nil
>=1 Year< 2 Year 10% of Salary
>=2 Year< 4 Year 20% of Salary
>4 Year 30% of Salary
sol:
CREATE OR REPLACE FUNCTION FUN_SAL(F_STAFF_CODE STAFF_MASTERS.STAFF_CODE%TYPE) RETURN NUMBER AS
  2  F_SAL STAFF_MASTERS.STAFF_SAL%TYPE;
  3  F_HIRE STAFF_MASTERS.HIREDATE%TYPE;
  4  F_DA NUMBER;
  5  F_HRA NUMBER;
  6  F_TA NUMBER;
  7  F_SA NUMBER;
  8  BEGIN
  9  SELECT STAFF_SAL,HIREDATE INTO F_SAL,F_HIRE FROM STAFF_MASTERS WHERE STAFF_CODE=F_STAFF_CODE;
 10  F_DA:=F_SAL*0.15;
 11  F_HRA:=F_SAL*0.2;
 12  F_TA:=F_SAL*0.08;
 13  IF ((SYSDATE-F_HIRE)/365)<1 THEN
 14  F_SA:=0;
 15  ELSIF ((SYSDATE-F_HIRE)/365)>=1 AND ((SYSDATE-F_HIRE)/365)<2 THEN
 16  F_SA:=F_SAL*0.1;
 17  ELSIF ((SYSDATE-F_HIRE)/365)>=2 AND ((SYSDATE-F_HIRE)/365)<4 THEN
 18  F_SA:=F_SAL*0.2;
 19  ELSE
 20  F_SA:=F_SAL*0.3;
 21  END IF;
 22  F_SAL:=F_DA+F_HRA+F_TA+F_SA;
 23  DBMS_OUTPUT.PUT_LINE(F_STAFF_CODE||' '||F_SAL);
 24  RETURN 1;
 25* END;
 26  /

Function created.

SQL> VARIABLE FLAG NUMBER;
SQL> EXECUTE :FLAG:=FUN_SAL(100004);


