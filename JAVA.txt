********2.1*************
// Write a java program to print person details in the format as shown below

public class Person{
	public static void main(String[] args) {
	  System.out.println("Person Details");
	  System.out.println("______________");
	  System.out.println("First Name : Divya");
	  System.out.println("Last Name : Bharati");
	  System.out.println("Gender: F");
	  System.out.println("Age : 20");
}
}

********3.1*************
// Write a program to accept a number from user as a command line argument and check whether the given number is positive or negative number. 

import java.util.*;
public class Check
{
public static void main(String a[])
{
int n;
Scanner sc= new Scanner(System.in);
System.out.println("Enter a number");
n=sc.nextInt();
if(n>0)
System.out.println("Positve");
else
System.out.println("Negative");
}
}
********4.1*************
// Refer the class diagram given below and create a person class. 
//Create default and parameterized constructor for Person class. 

public class Person {
	String firstName, lastName;
	char gender;
	public Person() {}
	public Person(String firstName, String lastName, char gender) {
		//super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.gender = gender;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public char getGender() {
		return gender;
	}
	public void setGender(char gender) {
		this.gender = gender;
	}
	
}


*********5.1***********
//create Account Class as shown below in class diagram. Ensure minimum balance of INR 500 in a bank account is available. 

import java.util.Scanner;
import java.util.Random;

public class Person
    {
       private String name; 
       private double balance; 
       private float age;
      
      public Person(String name, double balance)
      {
         this.name = name; 
         if (balance > 500.0)                     
            this.balance = balance; 
      }

     
      public void deposit(double depositAmount)                        
      {                                                                
         if (depositAmount > 0.0) 
            balance = balance + depositAmount; 
      }  
      
      public void withdraw(double withdrawAmt)                        
      {                                                                
         if (withdrawAmt > 0.0 && balance>(withdrawAmt+500)) 
            balance = balance - withdrawAmt;
      }      
      
      public double getBalance()           
      {                                    
         return balance;                   
      }                                    

     
      public void setName(String name)
      {
         this.name = name;
      }

      
      public String getName()
      {
         return name;
      }
   }
    
    public class Account
    {
       public static void main(String[] args)
       {
           double depositAmount;
           String accname;
           double withdrawAmt;
           int opt;
          Person account1 = new Person("Smith", 2000.00); 
         Person account2 = new Person("Kathy", 3000.00); 
         Person accounts = new Person("Smith balance :",2000.00);
          Person accountk = new Person("Kathy balance :",3000.00);
         System.out.println(accounts + "\n" + accountk);
         Scanner input = new Scanner(System.in);
         Random rand = new Random();
        System.out.println("Enter Account Holder Name");
         accname=input.nextLine();
         if(accname.equals("Smith")){
             System.out.println("Account No:" + rand.nextInt(1000000));
         System.out.printf("%s balance: $%.2f%n",
            account1.getName(), account1.getBalance());
             System.out.println("Select options 1.Deposit 2.Withdraw 3.Checkbalance");
               opt=input.nextInt();
              if(opt==1){
         System.out.print("Enter deposit amount for Smith: "); 
           depositAmount= input.nextDouble(); 
         System.out.printf("%nadding %.2f to account1 balance%n%n",
            depositAmount);
         account1.deposit(depositAmount); 
         System.out.printf("%s balance: $%.2f%n",
            account1.getName(), account1.getBalance());
         }
              if(opt==2){
                System.out.print("Enter Withdraw amount from Smith:"); 
                withdrawAmt= input.nextDouble();
                System.out.printf("%nWithdrawing %.2f from Smith balance%n%n",
            withdrawAmt);
            account1.withdraw(withdrawAmt);
            System.out.printf("%s balance: $%.2f%n%n",
            account1.getName());
         }}
            if(accname.equals("Kathy")){
                System.out.println("Account No:" + rand.nextInt(1000000));
         System.out.printf("%s balance: $%.2f%n%n",
            account2.getName(), account2.getBalance());
             System.out.println("Select options 1.Deposit 2.Withdraw 3.Checkbalance");
           opt=input.nextInt();
              if(opt==1){
         System.out.print("Enter deposit amount for Kathy: "); 
         depositAmount = input.nextDouble(); 
         System.out.printf("%nadding %.2f to account2 balance%n%n",
            depositAmount);
         account2.deposit(depositAmount); 
            
         System.out.printf("%s balance: $%.2f%n%n",
            account2.getName());
            }
            if(opt==2){
                System.out.print("Enter Withdraw amount from Kathy:"); 
                withdrawAmt= input.nextDouble();
                System.out.printf("%nWithdrawing %.2f from Kathy balance%n%n",
            withdrawAmt);
            account2.withdraw(withdrawAmt);
            System.out.printf("%s balance: $%.2f%n%n",
            account2.getName(), account2.getBalance());
            }
            }
      } 
   } 


**********5.2(a)**********
/* Extend the functionality through Inheritance and polymorphism (Maintenance) 
Savings Account a. Add a variable called minimum Balance and assign final modifier.
b.Override method called withdraw (This method should check for minimum balance and allow withdraw to happen) */
 

class CurrAcc extends Person{
    int overdraftLimit = 3000;
    public boolean withdraw(double withdrawAmt)                        
      {     if(withdrawAmt>3000)
         return false;
         
         if (withdrawAmt > 0.0 && balance>(withdrawAmt+500)) 
            balance = balance - withdrawAmt;
            return true;
      }   
}

***********5.2(b)***********
/*Current Account a. Add a variable called overdraft Limit 
b. Override method called withdraw (checks whether overdraft limit is reached and returns a boolean value accordingly)*/


class SavingsAcc extends Person{
    final int minbal=500;
    withdraw(double withrawAmt){                        
      {                                                                
         if (withdrawAmt > 0.0 && balance>(withdrawAmt+minbal)) 
            balance = balance - withdrawAmt;
      }   } 
}

********6.1(a)*************
 /*Refer the case study 2 in page no: 5 and create an application for that requirement
 by creating packages and classes as given below: 
 com.cg.eis.bean  In this package, create “Employee” class with different attributes 
such as id, name, salary, designation, insuranceScheme. */

package com.cg.eis.bean;

public class Employee {
	String id;
	String name;
	double salary;
	String designation;
	String insuranceScheme;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	public String getDesignation() {
		return designation;
	}
	public void setDesignation(String designation) {
		this.designation = designation;
	}
	public String getInsuranceScheme() {
		return insuranceScheme;
	}
	public void setInsuranceScheme(String insuranceScheme) {
		this.insuranceScheme = insuranceScheme;
	}
	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", salary=" + salary + ", designation=" + designation
				+ ", insuranceScheme=" + insuranceScheme + "]";
	}
	
}



*********6.1(b)*************

/*com.cg.eis.service   This package will contain code for services offered in Employee Insurance System. 
The service class will have one EmployeeService Interface and its corresponding implementation class. */

package com.eg.eis.service;

import java.util.Scanner;
import com.cg.eis.bean.*;

public interface EmployeeService {
	Object employeeDetails();
	void insuranceScheme();
	void displayDetails(Object e1);
}


public class EmployeeServiceImplementation implements EmployeeService {

	@Override
	public Employee employeeDetails() {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter employee details: id, name, salary, designation, insurance scheme");
		Employee a1 = new Employee();
		String id = sc.nextLine();
		String name = sc.nextLine();
		double salary = sc.nextDouble();
		String designation = sc.nextLine();
		String insuranceScheme = sc.nextLine();
		a1.setId(id);
		a1.setName(name);
		a1.setSalary(salary);
		a1.setDesignation(designation);
		a1.setInsuranceScheme(insuranceScheme);
		sc.close();
		return a1;
	}

	@Override
	public void insuranceScheme() {
		System.out.println("Finds the insurance scheme of an Employee based on salary and designation. ");
		
	}

	@Override
	public void displayDetails(Object e1) {
		String output = e1.toString();
		System.out.println(output);
		
	}

}


*********6.1(c)*************
/*com.cg.eis.pl   This package will contain code for getting input from user, 
produce expected output to the user and invoke services offered by the system. */ 
 

package com.cg.eis.pf;

import com.eg.eis.service.*;
import com.cg.eis.bean.*;
public class UserInput {
	public static void main(String args[]) {
		
		EmployeeServiceImplementation emp1 = new EmployeeServiceImplementation();
		Employee e1 = emp1.employeeDetails();
		emp1.insuranceScheme();
		emp1.displayDetails(e1);
		
		
	}
}



*********7.2********

/*Validate the age of a person in Lab assignment 4.2 and display proper message by using user defined exception. 
Age of a person should be above 15.*/ 

public class PersonDetails602 {
	String firstName;
	String lastName;
	char gender;
	int age;
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public char getGender() {
		return gender;
	}
	public void setGender(char gender) {
		this.gender = gender;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		if(age<=15) {
			throw new InvalidAgeException();
		}
		this.age = age;
	}


	public PersonDetails602() {

 	}
	@Override
	public String toString() {
		return "Person Details [First Name = " + firstName + ", Last Name = " + lastName + ", Gender = " + gender + ", Age = "
				+ age + "]";
	}


 }



 import java.util.Scanner;

 public class Person602 {
	public static void main(String args[]) {

 		try{
			Scanner sc = new Scanner(System.in);
			String firstName = sc.nextLine();
			String lastName = sc.nextLine();
			String gender = sc.next();
			int age = sc.nextInt();
			PersonDetails602 p1 = new PersonDetails602();
			p1.setFirstName(firstName);
			p1.setLastName(lastName);
			p1.setGender(gender.charAt(0));
			p1.setAge(age);
			System.out.println(p1.toString());
			sc.close();
		} catch (InvalidAgeException e1){
			System.out.println("Age should be above 15 years. Invalid.");
		}
	}
}



 public class InvalidAgeException extends RuntimeException {

 	
	private static final long serialVersionUID = 1L;

 	public InvalidAgeException() {

 	}

 	public InvalidAgeException(String message) {
		super(message);

 	}

 	public InvalidAgeException(Throwable cause) {
		super(cause);

 	}

 	public InvalidAgeException(String message, Throwable cause) {
		super(message, cause);

 	}

 	public InvalidAgeException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
		super(message, cause, enableSuppression, writableStackTrace);

 	}

 }



**********8.1***********

/* Write a program to read content from file, reverse the content and write the reversed content to the file. 
(Use Reader and Writer APIs) */


	Package co.fileHandling;


	import java.io.BufferedReader;

	import java.io.BufferedWriter;

	import java.io.FileNotFoundException;

	import java.io.FileReader;

	import java.io.FileWriter;

	import java.io.PrintWriter;

	import java.util.ArrayList;

	import java.util.Collections;

	import java.util.Iterator;

	import java.util.List;

	import java.util.Scanner;

	public class ReadingAndWriting {

	

		public static void main(String args[]) throws Exception {
			try{

				Scanner sc = new Scanner(System.in);

			

				System.out.print("Enter the complete path: ");

				String path = sc.nextLine();

				FileReader reader = new FileReader(path);

				BufferedReader br = new BufferedReader(reader);

				FileWriter writer = new FileWriter(path);

				List<String> input = new ArrayList<String>();

				String line;

				while((line=br.readLine())!=null) {

					input.add(line);

					System.out.println(line);

				}

				System.out.println("Contents successfully read.");

				Collections.reverse(input);

				PrintWriter output = new PrintWriter(new BufferedWriter(new FileWriter("src\\co\\fileHandling\\Output.txt")));

				for (Iterator<String> i = input.iterator(); i.hasNext();) {

					//while((line=br.readLine())!=null) {

					//}

					output.println((String) i.next());

				}

				System.out.println("Contents successfully written.");

				sc.close();

				reader.close();

				writer.close();

				output.close();

			} catch(Exception e) {

				System.out.println("Something went wrong.");

			}

			

		}

	}


**********8.2***********

// Create a file named as “numbers.txt” which should contain numbers from 0 to 10 delimited by comma. 
//Write a program to read data from numbers.txt using Scanner class API and display only even numbers in the console


	
      package co.fileHandling;

	import java.io.BufferedWriter;

	import java.io.File;

	import java.io.FileWriter;

	import java.util.Scanner;

	import java.lang.Exception;

	

	public class Numbers {

	

		public static void main(String[] args) throws Exception {
			System.out.println("Enter the complete path: ");

			//String path = sc.nextLine();

			File file = new File("src\\co\\fileHandling\\numbers2.txt");

			if(file.createNewFile()) {

				System.out.println("file created succesfully");

			}

			else {

				System.out.println("Error in file creation.");

			}

			FileWriter writer = new FileWriter(file);

			//BufferedWriter br = new BufferedWriter(writer);

			writer.write("0,1,2,3,4,5,6,7,8,9,10");

			System.out.println("Succesfully written.");

			

			Scanner sc = new Scanner(file); 

			sc.useDelimiter(",");

			String ch;

			//System.out.println("file created succesfully");

			while(sc.hasNextLine()) {

				//System.out.println("file created succesfully");

				ch = sc.next();

				if(((int)(ch.charAt(0))%2)== 0)

					System.out.println(ch);

				

			}

			writer.close();

			//br.close();

			sc.close();

		}

	

	}





